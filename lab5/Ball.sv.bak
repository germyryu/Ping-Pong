module Ball
    (input logic serve, clock, reset, update,
    input logic [8:0] row,
    input logic [9:0] col,
    output logic [7:0] score);

    logic up, down, left, right;
    logic [8:0] newrow;
    logic [9:0] newcol;

    assign newrow = row - 2'd1;
    assign newcol = col + 1'd2;


    BallRowRegister #(10) ballrow (newrow, update, 0, clock, reset, row);
    BallColRegister #(10) ballcol (newcol, update, 0, clock, reset, col);

    BallComp #(10) attop ( , down, , row, 10'd0);
    BallComp #(10) atbottom ( , up, , row, 10'd479);
    BallComp #(10) atright ( ,  left, , col, 10'd577);
    BallComp #(10) atleft ( , right, , col, 10'd63);



endmodule: Ball

module ChipInterface
    (input logic CLOCK_50,
    input logic [3:0] KEY,
    input logic [17:0] SW,
    output logic [6:0] HEX0, HEX1, HEX2, HEX3,
                       HEX4, HEX5, HEX6, HEX7,
    output logic [7:0] VGA_R, VGA_G, VGA_B,
    output logic VGA_BLANK_N, VGA_CLK, VGA_SYNC_N,
    output logic VGA_VS, VGA_HS);

    logic reset;
    logic [8:0] row;
    logic [9:0] col;


    logic blank;
    assign VGA_BLANK_N = ~blank;
    vga dut(CLOCK_50, ~KEY[0], VGA_HS, VGA_VS, blank, row, col);

    logic ball_update;
    assign ball_update = (row==10'd479) && (col==10'd639);
    Ball b(~KEY[3], CLOCK_50, ~KEY[0], ball_update, row, col, )

    assign VGA_R = (col >= 320 && row < 250) ? 255 : 0;
    assign VGA_G = (col % 320 >= 160 && row < 250) ? 255 : 0;
    assign VGA_B = (col % 160 >= 80 && row < 250) ? 255 : 0;
    assign VGA_SYNC_N = 1;
    assign VGA_CLK = ~CLOCK_50;
endmodule: ChipInterface

module BallComp
  #(parameter   WIDTH = 8)
  (output logic             AltB, AeqB, AgtB,
   input  logic [WIDTH-1:0] A, B);

  assign AeqB = (A == B);
  assign AltB = (A <  B);
  assign AgtB = (A >  B);

endmodule: BallComp

module BallRowRegister
  #(parameter WIDTH=8)
  (input  logic [WIDTH-1:0] D,
   input  logic             en, clear, clock, reset
   output logic [WIDTH-1:0] Q);
   
  always_ff @(posedge clock)
    if (en)
        Q <= D;
    else if (clear)
        Q <= 0;
    else if (reset)
        Q <= 10'd239;
      
endmodule : BallRowRegister

module BallColRegister
  #(parameter WIDTH=8)
  (input  logic [WIDTH-1:0] D,
   input  logic             en, clear, clock, reset
   output logic [WIDTH-1:0] Q);
   
  always_ff @(posedge clock)
    if (en)
        Q <= D;
    else if (clear)
        Q <= 0;
    else if (reset)
        Q <= 10'd319;
      
endmodule : BallColRegister



